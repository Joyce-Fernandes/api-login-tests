{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-25T10:59:48.146Z",
    "end": "2025-07-25T10:59:48.247Z",
    "duration": 101,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "438262ea-0c2e-4b0b-b27c-549cd9c48e1f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "79101d2f-3cfd-45e5-890d-ac177dd43cc2",
          "title": "Testes da API de Login",
          "fullFile": "C:\\Users\\joyce\\OneDrive\\Documents\\Mentoria2.0\\Projetos\\Projetos\\tests\\login.test.js",
          "file": "\\Projetos\\tests\\login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST /login deve retornar 200 com mensagem de sucesso",
              "fullTitle": "Testes da API de Login POST /login deve retornar 200 com mensagem de sucesso",
              "timedOut": false,
              "duration": 57,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/login')\n  .send({ email: 'joao@example.com', password: '1234' });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('status', 'success');\nexpect(res.body).to.have.property('token');",
              "err": {},
              "uuid": "ccfcbdb1-1758-4b6c-877c-3622ac10f0fc",
              "parentUUID": "79101d2f-3cfd-45e5-890d-ac177dd43cc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /login com credenciais inválidas deve retornar 401",
              "fullTitle": "Testes da API de Login POST /login com credenciais inválidas deve retornar 401",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/login')\n  .send({ email: 'joao@example.com', password: 'errada' });\nexpect(res.status).to.equal(401);\nexpect(res.body).to.have.property('status', 'invalid');",
              "err": {},
              "uuid": "65e3fe8d-9eaf-4d10-8740-b5073dd374eb",
              "parentUUID": "79101d2f-3cfd-45e5-890d-ac177dd43cc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /login com email inexistente deve retornar 404",
              "fullTitle": "Testes da API de Login POST /login com email inexistente deve retornar 404",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/login')\n  .send({ email: 'naoexiste@example.com', password: '1234' });\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('status', 'not_found');",
              "err": {},
              "uuid": "7cea6eee-3001-4490-a8c9-465923f274e0",
              "parentUUID": "79101d2f-3cfd-45e5-890d-ac177dd43cc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /login/reminder deve retornar lembrete de senha",
              "fullTitle": "Testes da API de Login POST /login/reminder deve retornar lembrete de senha",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/login/reminder')\n  .send({ email: 'joao@example.com' });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('status', 'success');\nexpect(res.body).to.have.property('reminder');",
              "err": {},
              "uuid": "99a6d437-b12d-4fec-9762-aa441ec2df3b",
              "parentUUID": "79101d2f-3cfd-45e5-890d-ac177dd43cc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST /login/reminder com email inexistente deve retornar 404",
              "fullTitle": "Testes da API de Login POST /login/reminder com email inexistente deve retornar 404",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request(app)\n  .post('/login/reminder')\n  .send({ email: 'naoexiste@example.com' });\nexpect(res.status).to.equal(404);\nexpect(res.body).to.have.property('status', 'not_found');",
              "err": {},
              "uuid": "edc06f39-7296-459c-a053-537eea586bee",
              "parentUUID": "79101d2f-3cfd-45e5-890d-ac177dd43cc2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ccfcbdb1-1758-4b6c-877c-3622ac10f0fc",
            "65e3fe8d-9eaf-4d10-8740-b5073dd374eb",
            "7cea6eee-3001-4490-a8c9-465923f274e0",
            "99a6d437-b12d-4fec-9762-aa441ec2df3b",
            "edc06f39-7296-459c-a053-537eea586bee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 82,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1f89111-2616-41a1-81fa-1acce3207d7d",
          "title": "loginService",
          "fullFile": "C:\\Users\\joyce\\OneDrive\\Documents\\Mentoria2.0\\Projetos\\Projetos\\tests\\loginService.test.js",
          "file": "\\Projetos\\tests\\loginService.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"loginService\"",
              "fullTitle": "loginService \"before each\" hook in \"loginService\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Resetar tentativas e bloqueio dos usuários antes de cada teste\nconst users = require('../src/services/users').users;\nusers.forEach(u => {\n  u.attempts = 0;\n  u.blocked = false;\n});",
              "err": {},
              "uuid": "dbfc9378-ab25-4541-aaa3-0672a54c0a73",
              "parentUUID": "f1f89111-2616-41a1-81fa-1acce3207d7d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve realizar login com sucesso",
              "fullTitle": "loginService deve realizar login com sucesso",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = loginService.login('joao@example.com', '1234');\nexpect(result.status).to.equal('success');\nexpect(result).to.have.property('token');",
              "err": {},
              "uuid": "021df7e1-b1a1-4dc7-8165-d09184658651",
              "parentUUID": "f1f89111-2616-41a1-81fa-1acce3207d7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve retornar inválido para senha errada",
              "fullTitle": "loginService deve retornar inválido para senha errada",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = loginService.login('joao@example.com', 'errada');\nexpect(result.status).to.equal('invalid');",
              "err": {},
              "uuid": "ec2a832f-6e54-42fa-9acd-4e9d1ca62990",
              "parentUUID": "f1f89111-2616-41a1-81fa-1acce3207d7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve bloquear após 3 tentativas inválidas",
              "fullTitle": "loginService deve bloquear após 3 tentativas inválidas",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "loginService.login('joao@example.com', 'x');\nloginService.login('joao@example.com', 'y');\nconst terceiro = loginService.login('joao@example.com', 'z');\nexpect(terceiro.status).to.equal('blocked');\n// Tentativa após bloqueio\nconst depois = loginService.login('joao@example.com', '1234');\nexpect(depois.status).to.equal('blocked');",
              "err": {},
              "uuid": "6bf376ee-cca9-4e96-a259-e52378a6366c",
              "parentUUID": "f1f89111-2616-41a1-81fa-1acce3207d7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve retornar lembrete de senha",
              "fullTitle": "loginService deve retornar lembrete de senha",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = loginService.passwordReminder('joao@example.com');\nexpect(result.status).to.equal('success');\nexpect(result.reminder).to.equal('Seu número favorito');",
              "err": {},
              "uuid": "8ad50513-bcd6-48ff-922d-6c4320e1bfde",
              "parentUUID": "f1f89111-2616-41a1-81fa-1acce3207d7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve retornar not_found para usuário inexistente",
              "fullTitle": "loginService deve retornar not_found para usuário inexistente",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = loginService.login('naoexiste@example.com', 'qualquer');\nexpect(result.status).to.equal('not_found');\nconst reminder = loginService.passwordReminder('naoexiste@example.com');\nexpect(reminder.status).to.equal('not_found');",
              "err": {},
              "uuid": "c9a4332a-e420-4080-9d42-f0e5d78b2393",
              "parentUUID": "f1f89111-2616-41a1-81fa-1acce3207d7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "021df7e1-b1a1-4dc7-8165-d09184658651",
            "ec2a832f-6e54-42fa-9acd-4e9d1ca62990",
            "6bf376ee-cca9-4e96-a259-e52378a6366c",
            "8ad50513-bcd6-48ff-922d-6c4320e1bfde",
            "c9a4332a-e420-4080-9d42-f0e5d78b2393"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}